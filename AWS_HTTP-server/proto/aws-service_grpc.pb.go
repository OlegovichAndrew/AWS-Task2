// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AWSServiceClient is the client API for AWSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSServiceClient interface {
	Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (AWSService_DownloadClient, error)
}

type aWSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSServiceClient(cc grpc.ClientConnInterface) AWSServiceClient {
	return &aWSServiceClient{cc}
}

func (c *aWSServiceClient) Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (AWSService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &AWSService_ServiceDesc.Streams[0], "/proto.AWSService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &aWSServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AWSService_DownloadClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type aWSServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *aWSServiceDownloadClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AWSServiceServer is the server API for AWSService service.
// All implementations must embed UnimplementedAWSServiceServer
// for forward compatibility
type AWSServiceServer interface {
	Download(*Request, AWSService_DownloadServer) error
	mustEmbedUnimplementedAWSServiceServer()
}

// UnimplementedAWSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAWSServiceServer struct {
}

func (UnimplementedAWSServiceServer) Download(*Request, AWSService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedAWSServiceServer) mustEmbedUnimplementedAWSServiceServer() {}

// UnsafeAWSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSServiceServer will
// result in compilation errors.
type UnsafeAWSServiceServer interface {
	mustEmbedUnimplementedAWSServiceServer()
}

func RegisterAWSServiceServer(s grpc.ServiceRegistrar, srv AWSServiceServer) {
	s.RegisterService(&AWSService_ServiceDesc, srv)
}

func _AWSService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AWSServiceServer).Download(m, &aWSServiceDownloadServer{stream})
}

type AWSService_DownloadServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type aWSServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *aWSServiceDownloadServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// AWSService_ServiceDesc is the grpc.ServiceDesc for AWSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AWSService",
	HandlerType: (*AWSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _AWSService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aws-service.proto",
}
